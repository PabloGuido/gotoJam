local datos = require("main.datos")
local botonera_x = datos.screen_size[1]/2;
local botonera_y = datos.screen_size[2] - 180;

-- Hashes
local activar_barra_msg = hash("activar_barra");
local desactivar_barra_msg = hash("desactivar_barra");
local parar_barra_msg = hash("parar_barra");

-- Var nodos
local red
local green
local blue

-- Vars
local marcador;
local barra_colores;
local ancho_barra_colores = 420;
local direccion = -1;
local velocidad = 500;
local posiciones_de_colores;
local orden_de_colores = {"red", "green", "blue"};
local color_mas_cercano = nil;

-- Vars funciones
local mover_marcador;
local cambiar_direccion;
local posicion_inicial_del_marcador;
local calcular_distancia_marcador;

function init(self)
	-- Nodos
	barra_colores = gui.get_node("caja_colores");
	marcador = gui.get_node("marcador");
	red = gui.get_node("red");
	green = gui.get_node("green");
	blue = gui.get_node("blue");

	-- Posiciones de colores
	posiciones_de_colores = {gui.get_position(red), gui.get_position(green), gui.get_position(blue)}
	-- Posicion botonera
	gui.set_position(barra_colores, vmath.vector3(botonera_x,botonera_y,0));
	
	--
	gui.set_enabled(barra_colores, false);

	
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	mover_marcador(dt);
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == activar_barra_msg then
		posicion_inicial_del_marcador();
		gui.set_enabled(barra_colores, true);
	elseif message_id == desactivar_barra_msg then
		gui.set_enabled(barra_colores, false);
	elseif message_id == parar_barra_msg then
		print("Parar barra ** barra_colores");
		calcular_distancia_marcador();
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

mover_marcador = function(dt)
	if gui.is_enabled(barra_colores) then
		local pos = gui.get_position(marcador);
		--print(pos);
		pos.x = pos.x + velocidad * dt * direccion;
		gui.set_position(marcador, pos);
		cambiar_direccion(pos.x);
	end
end

cambiar_direccion = function(posicion)
	if posicion < -ancho_barra_colores/2 then
		direccion = 1;
	elseif posicion > ancho_barra_colores/2 then
		direccion = -1;
	end
end

posicion_inicial_del_marcador = function()
	local num_random = math.random(1, 3);
	local pos_random = posiciones_de_colores[num_random];
	gui.set_position(marcador, pos_random);

end

calcular_distancia_marcador = function()
	local pos = gui.get_position(marcador);
	local menor_distancia = 9999;
	--local una_pos = posiciones_de_colores[1];
	for i = 1, #posiciones_de_colores do
		local color_pos = posiciones_de_colores[i];
		local distancia = math.sqrt((color_pos.x - pos.x)^2 + (color_pos.y - pos.y)^2)
		--print(distancia)
		if color_mas_cercano == nil or distancia < menor_distancia then
			menor_distancia = distancia;
			color_mas_cercano = orden_de_colores[i]
		end
	end
	datos.print(color_mas_cercano);

end








