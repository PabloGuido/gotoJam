local datos = require("main.datos")
local remedios = require("game.game gui.glosario.remedios")
local botonera_x = datos.screen_size[1]/2;
local botonera_y = datos.screen_size[2] - 80;
-- Vars funciones
local activar_boton;
local boton_selecto;
local desactivar_barra;
local apagar_boton_selecto;
local parar_barra;
local desaparecer_textos;
local aparecer_textos;
local sumar_numerador_orden;
local cambiar_color_boton;
local restaurar_orden;
local chequeo_correccion;
local restaurar_click;
local orden_incorrecto;
local aplicar_remedio;
local murio_bicho;

-- Nodos
local vacc_t;
local pasti_t;
local curita_t;
local comida_t;
local tabla_textos;
local vacc1
local pasti1
local curita1
local comida1

-- Flags
local bicho_muerto = false;


-- Vars
local ultimo_boton_presionado = nil;
local numerador_orden = 1;
local puede_clickear = true;
local boton_back = nil;

function init(self)
	-- Nodos
	self.botonera = gui.get_node("caja_botonera");
	self.vacc = gui.get_node("vacuna"); 
	self.pasti = gui.get_node("pasti");
	self.curita = gui.get_node("curita");
	self.comida = gui.get_node("comida");
	vacc_t = gui.get_node("vacuna_t"); 
	pasti_t= gui.get_node("pasti_t");
	curita_t = gui.get_node("curita_t");
	comida_t = gui.get_node("comida_t");
	tabla_textos = {vacc_t, pasti_t, curita_t, comida_t};

	vacc1 = gui.get_node("vacuna1"); 
	pasti1 = gui.get_node("pasti1"); 
	curita1 = gui.get_node("curita1"); 
	comida1 = gui.get_node("comida1"); 

	self.boton_selecto = gui.get_node("boton_selecto");
	gui.set_enabled(self.boton_selecto, false);

	-- Posicion botonera
	gui.set_position(self.botonera, vmath.vector3(botonera_x,botonera_y,0));

	-- Flags
	self.boton_activo = nil;
	self.boton_activo_c = nil;
	-- Input - InicializaciÃ³n
	desaparecer_textos();
	msg.post("", "acquire_input_focus");
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.1, 0.25, 0.25, 1) } )
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if not remedios.bicho_curado and not bicho_muerto then
		msg.post("barra_de_vida", "bajar_vida", {delta = dt});
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("color") then
		--pprint(message.color)
		--cambiar_color_boton(self, self.boton_activo_c, message.color);
		chequeo_correccion(self, message.color[1]);
	elseif message_id == hash("muere_bicho") then
		murio_bicho(self);
	end
end

function on_input(self, action_id, action)

	if gui.is_enabled(self.vacc) and gui.pick_node(self.vacc, action.x, action.y) and action.pressed then
		activar_boton(self, self.vacc, vacc_t, vacc1);
		
	elseif gui.is_enabled(self.pasti) and gui.pick_node(self.pasti, action.x, action.y) and action.pressed then
		activar_boton(self, self.pasti, pasti_t, pasti1);
		
	elseif gui.is_enabled(self.curita) and gui.pick_node(self.curita, action.x, action.y) and action.pressed then
		activar_boton(self, self.curita, curita_t, curita1);
		
	elseif gui.is_enabled(self.comida) and gui.pick_node(self.comida, action.x, action.y) and action.pressed then
		activar_boton(self, self.comida, comida_t, comida1);
		
	elseif self.boton_activo ~= nil and action.pressed then
		--print("Desactivar barra 1");
		desactivar_barra(self);
	end
	
end

activar_boton = function(self, nombre_de_boton, ubt, botonback)
	if puede_clickear then
		if self.boton_activo == nil then
			self.boton_activo_c = nombre_de_boton;
			self.boton_activo = gui.get_id(nombre_de_boton);
			boton_back = botonback;
			ultimo_boton_presionado = ubt;
			boton_selecto(self, gui.get_position(nombre_de_boton));
			print(self.boton_activo);
			msg.post("barra_colores#barra_colores", "activar_barra")
		elseif self.boton_activo ~= gui.get_id(nombre_de_boton) then
			--print("Desactivar barra 2");
			desactivar_barra(self);
		elseif self.boton_activo == gui.get_id(nombre_de_boton) then
			--print("Parar barra 1 ** botones.gui");
			parar_barra(self);
		end
	end
end

boton_selecto = function(self, pos)
	gui.set_enabled(self.boton_selecto, true);
	gui.set_position(self.boton_selecto, pos);
end
apagar_boton_selecto = function(self)
	gui.set_enabled(self.boton_selecto, false);
end


desactivar_barra = function(self)
	ultimo_boton_presionado = nil;
	apagar_boton_selecto(self);
	msg.post("barra_colores#barra_colores", "desactivar_barra");
	self.boton_activo = nil;
	boton_back = nil;
	
end

parar_barra = function(self)
	puede_clickear = false;
	msg.post("barra_colores#barra_colores", "parar_barra");
	apagar_boton_selecto(self);

end

desaparecer_textos = function()
	for i = 1, #tabla_textos do
		gui.set_enabled(tabla_textos[i], false)
	end
end

aparecer_textos = function(nodo)
	--sumar_numerador_orden();
	gui.set_enabled(nodo, true)
	gui.set_text(nodo, numerador_orden)
end

sumar_numerador_orden = function()
	numerador_orden = numerador_orden + 1;
end

cambiar_color_boton = function(self, nodo, colorc)
	gui.set_color(nodo, colorc)
	self.boton_activo_c = nil;
end

restaurar_orden = function(self)
	local clr_gry = vmath.vector4(0.8,0.8,0.8,1);
	numerador_orden = 1;
	desactivar_barra(self);
	desaparecer_textos();
	cambiar_color_boton(self, self.vacc, clr_gry);
	cambiar_color_boton(self, self.pasti, clr_gry);
	cambiar_color_boton(self, self.curita, clr_gry);
	cambiar_color_boton(self, self.comida, clr_gry);
end

chequeo_correccion = function(self, color)
	
	local estado_bicho = remedios.bicho;
	print(self.boton_activo)
	if self.boton_activo == remedios[estado_bicho].orden[numerador_orden] and color == remedios[estado_bicho][numerador_orden][1] then
		print("Boton correcto")
		msg.post("/sonidos", "sonido", {sonido = "#ok"})
		aparecer_textos(ultimo_boton_presionado);
		gui.set_enabled(self.boton_activo_c, false);
		local colorcito_back = remedios[estado_bicho][numerador_orden][2];
		colorcito_back2 = vmath.vector4(0,0,0,0.25);
		gui.set_color(boton_back, colorcito_back-colorcito_back2)
		sumar_numerador_orden();
		if numerador_orden >= 5 then
			aplicar_remedio();
			return
		end
		restaurar_click(self)
	else 
		print("Boton incorrecto")
		msg.post("/sonidos", "sonido", {sonido = "#not_ok"})
		orden_incorrecto(self);
	end
end

restaurar_click = function(self)
	self.boton_activo = nil;
	puede_clickear = true;
	datos.print("Click OK")
end

orden_incorrecto = function(self)
	datos.print("NOT NOT OK")
	timer.delay(1.5, false, restaurar_click)
end

aplicar_remedio = function()
	datos.print("Aplicar remedio")
	msg.post("/sonidos", "sonido", {sonido = "#remedio"})
	remedios.bicho_curado = true;
end

murio_bicho = function(self)
	bicho_muerto = true;
	print("muete el bicho");
	desactivar_barra(self);
	self.boton_activo = nil;
	puede_clickear = false;
end









